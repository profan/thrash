{

  open Ast

}

%token <int> INT
%token <string> VAR
%token LPAREN RPAREN 
%token PLUS MINUS TIMES DIV
%token IF DO ELSE END WHILE FOR LET IN EQUAL
%token SEMICOLON
%token EOF EOL

%relation pi<pt<pp

%start main

%%

main : expr * EOF { $1 }

expr :
  | INT<x>                                            { x }                       pi
  | VAR<x>                                            { 0 }                       pi
  | MINUS expr(=pi)<x>                                { -x }                      pi
  | LPAREN expr<x> RPAREN                             { x }                       pi
  | expr(<=pp)<x> PLUS expr(<pp)<y>                   { x + y }                   pp
  | expr(<=pp)<x> MINUS expr(<pp)<y>                  { x - y }                   pp
  | expr(<=pt)<x> TIMES expr(<pt)<y>                  { x * y }                   pt
  | expr(<=pt)<x> DIV expr(<pt)<y>                    { x / y }                   pt
  | IF expr<cond> DO expr<thn> ELSE expr<els> END     { thn }                     pi
  | WHILE expr<cond> DO expr<body> END                { body }                    pi
  | FOR expr<cond> IN expr<list> DO expr<body> END    { body }                    pi
  | LET VAR EQUAL expr<e>                             { e }                       pi
